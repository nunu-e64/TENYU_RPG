\----------------------------------------
\\-----コメントは行頭に"\"をつける--------
\----------------------------------------

\------【バトルシステムコマンド】（随時更新）--
\----------------------------------------
\--@Load_Pic(相対パス, PicKey, [分割数])： 戦闘用各種画像読み込み,
\		・画像データを任意の文字列を[PicKey]として読み込む。PicKeyは@Enemy_Createや@Player_Createで使用する
\		・分割数は省略可能。横方向に同じ大きさの画像を並べておき分割数を指定することで一括読み込みが可能。		
\
\  @Player_Set(name, MaxHp, Atk, Def, Spd, PicKey)
\		・戦闘に出る味方キャラを生成
\		・PicKey…@Load_Picで登録しておいたキーを指定。
\		・Nameの重複は禁止
\  @Enemy_Set(name, MaxHp, Atk, Def, Spd, PicKey)
\		・戦闘に出る敵キャラを生成
\		・PicKey…@Load_Picで登録しておいたキーを指定。
\		・Nameの重複は禁止
\  @TrickEffect_Create(EffectName, TYPE_NAME, arg0, arg1, arg2, ...)
\		・技の発動エフェクトを作成
\		・TYPE_NAME…基本タイプ。以下から選びタイプに応じて引数を指定する（14/12/10現在）
\			・PROTO…8つの光球が螺旋状に自分のもとに集まり一つの光球となって相手に向かって飛んでいく
\				・arg0=Size1・・・収束する光球ひとつひとつの半径
\				・arg1=Size2・・・相手に向かって飛んでいく光球の半径
\				・arg2=Radius・・・光球が収束するときの初期配置における中心からの距離
\  @NormalTrick_Create(name, power, cost, effectname)
\		・通常技の生成。特殊効果無し。
\		・effectnameには"PROTO_BIG"のように技の発動エフェクト名を指定
\		・effectnameを"NULL"にした場合、その技は発動エフェクトなし。（14/12/15現在の仕様→デフォルトのダメージ演出を作るべきか）
\  @PlayerTrick_Set(PlayerName, TrickName*n)
\		・@Trick_Create系で作った技を味方キャラに割り当てる。
\		・n<=20（14/12/07現在）
\  @EnemyTrick_Set(PlayerName, TrickName*n)
\		・@Trick_Create系で作った技を敵キャラに割り当てる。
\		・n<=20（14/12/07現在）
\  @RandomPlan_Set(PlanIndex, EnemyName, (TrickIndex, Percent)*n, ...)
\		・PlanIndex…@AI_Setで使うためのランダムプランの通し番号
\		・TrickIndex…@EnemyTrick_Setで割り当てた技
\		・Percent…その技を使う比率
\		・n<=20（14/12/07現在）
\  @AI_Set(EnemyName, TYPE_NAME, arg0, arg1, arg2, ...)
\
\		・RandomPlanの組み合わせによって敵のAIを設定する
\		・TYPE_NAME…基本タイプ。以下から選びタイプに応じて引数を指定する（14/12/10現在）
\			・MYHP…Enemy自身の残りHPに応じてRandomPlanを切り替える。段階は10段階まで設定可能。最後の[0%]は省略可能。
\				・詳細は下の例を参考に。数字は@RandomPlan_SetのPlanIndexと対応する
\				・例：@AI_Set(エネミーA, MYHP, 0, 80%, 1, 30%, 2, 0%)	\HPが80%より大きいときRandomPlan[0]に、80%以下30%より大きいときRandomPlan[1]に、30%以下のときRandomPlan[2]に基づいて行動を選択する
\			・PLAYERNUM…プレイヤーの生存人数に応じてRandomPlanを切り替える
\				・詳細は下の例を参考に。数字は@RandomPlan_SetのPlanIndexと対応する（※順番に注意）
\				・例：@AI_Set(エネミーA, PLAYERNUM, 0, 1, 2)	\プレイヤーが3人のときRandomPlan[2]に、2人のときRandomPlan[1]に、1人のときRandomPlan[0]に基づいて行動を選択する
\
\
\  @Encount_Set(MapNum, UnderChipNum, Percent)
\		・マップ上のエンカウント率設定。
\		・MapNum…エンカウント設定するマップ番号。@LoadMapと対応。
\		・UnderChipNum…マップ内のどのチップ種にエンカウント設定するか指定する。チップ番号は下層なので注意。
\		・Percent…エンカウント率。％表記で、小数点一桁まで指定可能。
\		・例：@Encount_Set(1, 125, 2.1%)
\  @Party_Set(MapNum, UnderChipNum, Percent, EnemyName*n)
\		・敵パーティの構成と出現設定
\		・MapNum, UnderChipNum…@Encount_Setと同じ
\		・Percent…このパーティの出現比率
\			・出現率ではない。つまり厳密にはPercentではない。
\			・処理の流れ
\				・@Encount_Setで設定したエンカウント率に基づいて戦闘開始判定
\				・戦闘開始が決まったら、今いるマップ、チップが@Party_Setで指定した番号に一致する複数あるいは単一のパーティの中から、Percentの比率でパーティが選ばれる
\			・例：@Party_Set(0, 0, 1, スライム, スライム)
\			      @Party_Set(0, 0, 2, ドラゴン, ドラゴン)
\				・マップ0のチップ0で戦闘開始が確定した場合、1:2の比でスライム2匹あるいはドラゴン2匹が出現する
\		・上の例の通り、EnemyNameには同じ名前も指定可能（例：スライムが3体出現）
\  @BackGround_Set(MapNum, [UnderChipNum], PicKey)
\
\		・戦闘背景画像を指定する
\		・PicKey…@LoadPicで登録しておいたキーを指定
\		・UnderChipNum…省略可能。省略した場合、そのマップ全体にその背景が指定される。
\			・コマンド順序によらず、UnderChipNumを指定した@BackGround_SetはUnderChipNumを省略した@BackGround_Setより優先される。
\----------------------------------------

\--Load-----------------------------------------------------------

\  @SpecialBattle01_Set(Gold, Exp, Member, etc...)	\unaPの要望に合わせてイベントごとに対応していく
\  @SpecialBattle02_Set(Hp, Mp, Member, etc...)	\unaPの要望に合わせてイベントごとに対応していく
\  @Battle(背景, EnemyNum, ...)

\\システム用画像読み込み\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
@Load_Pic(tenyu_data/pic/sys/battle/target.png, TARGET_CURSOR)
\@Load_Pic(tenyu_data/pic/sys/battle/cursor.png, MENU_CURSOR) \未使用
@Load_Pic(tenyu_data/pic/sys/battle/timebar1.png, TIME_BAR1)
@Load_Pic(tenyu_data/pic/sys/battle/timebar2.png, TIME_BAR2)
@Load_Pic(tenyu_data/pic/sys/battle/TimeWait.png, TIME_WAIT)
@Load_Pic(tenyu_data/pic/sys/battle/TimeTrick.png, TIME_TRICK)
@Load_Pic(tenyu_data/pic/sys/battle/TimeDeffence.png, TIME_DEFFENCE)
@Load_Pic(tenyu_data/pic/sys/battle/TimePray.png, TIME_PRAY)

@Load_Pic(tenyu_data/pic/sys/battle/hpbar.png, HP_BAR)
@Load_Pic(tenyu_data/pic/sys/battle/LogWindowButton.png, LOG_WINDOW_BUTTON, 2)

@Load_Pic(tenyu_data/pic/sys/battle/AttentionMarker.png, ATTENTION_MARKER, 3)
@Load_Pic(tenyu_data/pic/sys/battle/AttentionBoard.png, ATTENTION_BOARD)
@Load_Pic(tenyu_data/pic/sys/battle/AttentionEffect.png, ATTENTION_EFFECT)

@Load_Pic(tenyu_data/pic/sys/battle/MagicCounter.png, MAGIC_COUNTER, 2)
@Load_Pic(tenyu_data/pic/sys/battle/SideEffectMarker.png, STATUS_CHANGER, 5, 2)

@Load_Pic(tenyu_data/pic/sys/battle/bomb.bmp, EFFECT_BOMB)
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

@Load_Pic(tenyu_data/pic/battle/background04.bmp, bg_01)
@Load_Pic(tenyu_data/pic/battle/background02.bmp, bg_02)

@Load_Pic(tenyu_data/pic/battle/enemy01.bmp, pic_enemy01)
@Load_Pic(tenyu_data/pic/battle/enemy02.bmp, pic_enemy02)
@Load_Pic(tenyu_data/pic/battle/enemy03.bmp, pic_enemy03)
@Load_Pic(tenyu_data/pic/battle/player0.png, pic_player01)
@Load_Pic(tenyu_data/pic/battle/player1.png, pic_player02)
@Load_Pic(tenyu_data/pic/battle/player2.png, pic_player03)

@TrickEffect_Create(PROTO_SMALL, PROTO, 10, 15, 60)
@TrickEffect_Create(PROTO_BIG, PROTO, 20, 25, 90)
@TrickEffect_Create(PROTO_MINI, PROTO, 8, 10, 40)
@TrickEffect_Create(BOMB_REDBIG, BOMB, 255,0,0, 10, 60)		\\未制作（15/04/20現在）
@TrickEffect_Create(あ, PROTO, 8, 10, 40)

@NormalTrick_Create(全体攻撃, 2Lv, 3MP, 100%, PROTO_BIG, ALL)
@NormalTrick_Create(攻撃大, 10Lv, 3MP, 110%, PROTO_BIG, SINGLE)
@NormalTrick_Create(攻撃小, 5Lv, 2MP, 90%, PROTO_SMALL, SINGLE)
@NormalTrick_Create(アタックアップ, 5Lv, 2MP, 90%, PROTO_SMALL, SINGLE, ATK, ME,+40%, 100%, 500%)
@NormalTrick_Create(ガードブレイク, 5Lv, 2MP, 90%, NULL, SINGLE, DEF, SINGLE, -40%, 100%, 500%)
@NormalTrick_Create(全部, 0Lv, 2MP, 100%, NULL, NULL, ATK, ALL, -50%, 100%, 160%, DEF, ALL, -50%, 100%, 160%, ATK, ALL_FRIEND, 50%, 100%, 160%, DEF, ALL_FRIEND, 50%, 100%, 160%)
@NormalTrick_Create(加速, 0Lv, 2MP, 50time, NULL, NULL, SPD, ME,+40%, 100%, 250time)
@NormalTrick_Create(スロウ, 0Lv, 2MP, 50time, NULL, SINGLE, SPD, SINGLE, -40%, 100%, 250time)
@NormalTrick_Create(ヒール, 0Lv, 2MP, 50time, PROTO_SMALL, SINGLE_FRIEND, HEAL, SINGLE, +20%, 100%, -1time)
@NormalTrick_Create(オールヒール, 0Lv, 4MP, 50time, NULL, NULL, HEAL, ALL_FRIEND, +10%, 100%, -1time)
@NormalTrick_Create(全体魔力回復, 0Lv, 5MP, 50time, NULL, NULL, MPHEAL, ALL_FRIEND, +1P, 100%, -1time)
@NormalTrick_Create(踊る, 0Lv, 5MP, 50time, NULL, NULL, ATTENTION, ALL, +10P, 100%, -1time)
@NormalTrick_Create(石ころ帽子, 0Lv, 5MP, 50time, NULL, NULL, ATTENTION, ALL, -10P, 100%, -1time)


@BaseTrick_Create(攻撃, 100%, PROTO_MINI)

\Player_Create(Name, Level, MaxHp[1~5], PlainTrickDamage[1~5], Atk[1~3], Def[1~3], Spd[1~3], PicKey)
@Player_Create(プレイヤーA, 10, 3, 3, 2, 2, 2, pic_player01)
@Player_Create(プレイヤーB, 10, 3, 3, 2, 2, 2, pic_player02)
@Player_Create(プレイヤーC, 10, 3, 3, 2, 2, 2, pic_player03)
@Player_Create(プレイヤーD, 10, 3, 3, 2, 2, 2, pic_player01)

@PlayerTrick_Set(プレイヤーA, 踊る, 石ころ帽子, 全体魔力回復, 全体攻撃, 全部, 加速, スロウ, ヒール, オールヒール) 
	\, アタックアップ, ガードブレイク, 全部)
@PlayerTrick_Set(プレイヤーB, 攻撃大, 攻撃小, 全体攻撃, 全部, 加速, スロウ, ヒール, オールヒール) 
	\, ガードブレイク, 全部)
@PlayerTrick_Set(プレイヤーC, 攻撃大, 攻撃小, 全体攻撃, 全部, 加速, スロウ, ヒール, オールヒール)
	\, ガードブレイク, アタックアップ, 全部)
@PlayerTrick_Set(プレイヤーD, 攻撃大, 攻撃小)

\Enemy_Create(Name, Level, MaxHp[1~5], Atk[1~3], Def[1~3], Spd[1~3], PicKey)
@Enemy_Create(エネミーA, 10, 3, 2, 2, 2, pic_enemy01)
@Enemy_Create(エネミーB, 10, 3, 2, 2, 2, pic_enemy02)
@Enemy_Create(エネミーC, 10, 3, 2, 2, 2, pic_enemy03)
@EnemyTrick_Set(エネミーA, 攻撃小, 攻撃大, 全体攻撃)
@EnemyTrick_Set(エネミーB, 攻撃小, 攻撃大)
@EnemyTrick_Set(エネミーC, 攻撃小, 攻撃大)

\@RandomPlan_Set(0, エネミーA, 0, 100%, 1, 0%)
@RandomPlan_Set(1, エネミーA, 0, 0%, 1, 100%)

@RandomPlan_Set(0, エネミーB, 0, 100%, 1, 0%)
@RandomPlan_Set(1, エネミーB, 0, 50%, 1, 50%)
@RandomPlan_Set(2, エネミーB, 0, 0%, 1, 100%)

@RandomPlan_Set(0, エネミーC, 0, 100%, 1, 0%)
@RandomPlan_Set(1, エネミーC, 0, 50%, 1, 50%)
@RandomPlan_Set(2, エネミーC, 0, 0%, 1, 100%)

\@AI_Set(エネミーA, MYHP, 0, 80%, 1, 0%)
@AI_Set(エネミーB, MYHP, 0, 80%, 1, 30%, 2, 0%)
@AI_Set(エネミーC, MYHP, 0, 80%, 1, 30%, 2, 0%)

@Encount_Set(1, 125, 2.1%)
@Encount_Set(1, 14, 20%)
@Party_Set(1, 125, 10, エネミーA)
@Party_Set(1, 125, 10, エネミーA, エネミーB)
@Party_Set(1, 125, 10, エネミーA, エネミーB, エネミーC)
@Party_Set(1, 14, 100, エネミーC, エネミーB, エネミーA)

@BackGround_Set(1, 14, bg_01)
@BackGround_Set(1, bg_02)

\\@EnamyParty_Create(keyA, B, A, C, A)	\ボツ案　エンカウント設定。同じパーティを使いまわすことはあるかもしれないが見にくくなるので面倒でも一つずつ書いていく仕様に変更
\\@Encount_Set(map1, 6.6, keyA, 10, keyB, 20)	\ボツ案　エンカウント設定

【b_system.rpg Load OK!】



