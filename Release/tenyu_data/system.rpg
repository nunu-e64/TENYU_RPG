
\--------------------------------------------------------------------------------
\------【システムコマンド】（随時更新）------------------------------------------
\--------------------------------------------------------------------------------
\--@Load_Map(相対パス, マップ番号)：マップデータ（バイナリ）を読み込む
\--			※拡張子はつけない
\--			・同名別拡張子のイベントマップを同時に自動読み込み
\--
\--@Load_Chip(相対パス, マップ番号, 層)：マップチップ画像を読み込む
\--			・マップ番号によってマップとリンク
\--			・縦横のサイズは自由。それぞれのチップが正方形でさえあれば画像の形は問わず読み込めます。
\--			・いずれの場合も、左上が0でその右隣が1…という風にマップデータと関連付けされます。
\--
\--@Load_Pic(相対パス, PicKey, カテゴリ)：イベント用&背景一枚絵用画像読み込み, 画像データPicKeyで呼び出す為、カテゴリ[Kind]はNPCか否かしか今のところ問題ではない(14/05/12)
\--
\--@Set_EventObj(マップ番号, イベントマップ上のバイナリデータの値, Kind, PicKey, [Name=MapNum-DataNum], [Visible])：マップ上のイベントオブジェクトを登録（画像つき）
\		・Kind…NPC,BLOCK,FLOOR,PANEL,PUSHBLOCK,COVER
\		・PicKey…@Load_Picで登録しておいたキーを指定。☆"NULL"を指定した場合、空白画像（見えない壁用など）
\		・Nameの重複は禁止
\		・Visibleまで指定する場合、Nameの省略は不可。VisibleはTrueまたはFalseで指定。省略時はTrue。
\--@Set_StartPosition(マップ番号, X座標, Y座標, 向き, PicKey)：プレイヤーの初期位置と画像を指定。複数回使った場合上書きされます。

\
\  @Create_MaterialItem(素材アイテム名, 所持上限, 金額, 売却可否)
\  @Create_AccessoryItem(装備アイテム名, 所持上限, 金額, 売却可否, [素材アイテム名, 必要個数]*n)
\  @Create_ConsumptionItem(消費アイテム名, 所持上限, 金額, 売却可否, 戦闘中の利用可否, 利用後の待機時間(0~100), 効果対象, [効果名, 効果値]*n)
\  @Create_KeyItem(キーアイテム名, 所持上限, 金額, 売却可否)
\
\
\--------------------------------------------------------------------------------


\--Load-----------------------------------------------------------
@Load_Map(tenyu_data/map/oldtown01, 0)
@Load_Map(tenyu_data/map/01-0, 1)
@Load_Chip(tenyu_data/pic/obrpg1_fieldchip.bmp, 0, 0)
@Load_Chip(tenyu_data/pic/obrpg1_objchip.bmp, 0, 1)
@Load_Chip(tenyu_data/map/chipset_matsuda_140621.bmp, 1, 0)
@Load_Chip(tenyu_data/pic/obrpg1_objchip.bmp, 1, 1)

\ぶっちゃけNPCかどうかしか意味がない。（NPCだけ絵のサイズが違う）一応Kindが違えばWarningは出るようにしてあるが違っていたとしても実害ないはず。多分。	←エラー出してないっぽい(14/05/12)
\	↑背景用一枚絵BGの導入。BGの時は全く別のところに画像が保存されてる(14/05/11)（←ウソだろこれ(14/06/24)）
@Load_Pic(tenyu_data/pic/ex_tree.bmp, 		pic_tree, 	PUSHBLOCK)
@Load_Pic(tenyu_data/pic/ex_treasurebox.bmp, 	pic_treasurebox, BLOCK)
@Load_Pic(tenyu_data/pic/ex_gate_l.bmp, 	pic_gate_l, 	BLOCK)
@Load_Pic(tenyu_data/pic/ex_gate_r.bmp, 	pic_gate_r, 	BLOCK)
@Load_Pic(tenyu_data/pic/ex_sign.bmp, 		pic_sign, 	BLOCK)
@Load_Pic(tenyu_data/pic/npc00.png, 		pic_player1, 	NPC)
@Load_Pic(tenyu_data/pic/npc01.png, 		pic_npc01, 	NPC)
@Load_Pic(tenyu_data/pic/npc02.png, 		pic_npc02, 	NPC)
@Load_Pic(tenyu_data/pic/ex_bridge.bmp, 	pic_bridge, 	COVER)
@Load_Pic(tenyu_data/pic/ex_door.bmp, 		pic_door,	PANEL)
@Load_Pic(tenyu_data/pic/ex_slidepanel.bmp, 	pic_slide, 	PANEL)

@Load_Pic(tenyu_data/pic/npc00.png, 		huyu, 	NPC)
@Load_Pic(tenyu_data/pic/npc01.png, 		hi, 	NPC)

@Load_Pic(tenyu_data/pic/bg/sample.bmp, 	pic_background01, BG)
@Load_Pic(tenyu_data/pic/bg/sample2.bmp, 	pic_background02, BG)
\-----------------------------------------------------------------

\--CreateItem-----------------------------------------------------

@Create_MaterialItem(赤の魔力結晶, 100ko, 5000en, true)	\これだけはシステムで用意するのが妥当か
@Create_MaterialItem(青の魔力結晶, 100ko, 5000en, true)	\これだけはシステムで用意するのが妥当か

@Create_AccessoryItem(攻撃防御一時上昇, 20ko, 200en, true, 赤の魔力結晶, 3ko 青の魔力結晶, 4ko, [ME, ATK, 25%, 200time, ME, DEF, 10%, 100time])
@Create_AccessoryItem(先手必勝, 20ko, 200en, true, 赤の魔力結晶, 3ko 青の魔力結晶, 4ko, [ME, SET_TIMEGAUGE, 100%, -1])
@Create_AccessoryItem(貝殻の鈴, 20ko, 200en, true, 赤の魔力結晶, 3ko 青の魔力結晶, 4ko, [ME, HEAL_AFTER_ATTACK, 3%, -1])
@Create_AccessoryItem(たべのこし, 20ko, 200en, true, 赤の魔力結晶, 3ko 青の魔力結晶, 4ko, [ME, HEAL_AFTER_SELECTCOMMAND, 5%, -1])

@Create_ConsumptionItem(消費アイテム, 10ko, 200en, true, true, 130time, ALL_FRIEND, HEAL, 30%)
@Create_ConsumptionItem(レッドグミ, 10ko, 100en, true, true, 70time, SINGLE_FRIEND, HEAL, 5%)
@Create_ConsumptionItem(ブルーグミ, 10ko, 150en, true, true, 100time, SINGLE_FRIEND, MPHEAL, 3point)
@Create_ConsumptionItem(セルフヒールグミ, 10ko, 150en, true, true, 100time, ME, MPHEAL, 2point, HEAL, 10%)

@Create_KeyItem(きんのたま, 5, 500, false)

\-----------------------------------------------------------------


\--Create_Shop----------------------------------------------------

\@Create_Shop(番号, [商品名]*n, ...)
@Create_Shop(0, レッドグミ, ブルーグミ, きんのたま, 消費アイテム)
@Create_Shop(1, きんのたま)
\-----------------------------------------------------------------


\--Set------------------------------------------------------------
\\スタート位置設定\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

\サンプルマップ
@Set_StartPosition(0, 9, 6, Down, pic_player1)	\←後に書いた方で上書きされる

\序章
\@Set_StartPosition(1, 11, 69, Right, huyu)

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

\町部分
	@Set_EventObj(0, 1, PANEL, NULL)	\最終引数nameを省略した場合は「KIND-MapNum-DataNum」で名前が生成される（ex:PANEL-0-1）
	@Set_EventObj(0, 2, PANEL, NULL)
	@Set_EventObj(0, 3, PANEL, pic_door, door01)
	@Set_EventObj(0, 4, PANEL, pic_door, door02)
	@Set_EventObj(0, 5, BLOCK, pic_gate_l, gate_l)
	@Set_EventObj(0, 6, BLOCK, pic_gate_r, gate_r)
	@Set_EventObj(0, 60, COVER, pic_bridge)
	@Set_EventObj(0, 61, PANEL, pic_slide)
	
	@Set_EventObj(0, 63, BLOCK, NULL, door03)
	@Set_EventObj(0, 63, NPC, pic_npc01, Mom, False)	\名前にNULLを指定し場合、引数省略と同じ効果
	@Set_EventObj(0, 63, NPC, pic_npc02, Sis, False)
	
	@Set_EventObj(0, 65, NPC, pic_player1, Man)
	@Set_EventObj(0, 66, BLOCK, pic_sign, sign01)
	@Set_EventObj(0, 67, BLOCK, pic_sign, sign02)
	@Set_EventObj(0, 68, BLOCK, pic_sign, sign03)
	@Set_EventObj(0, 69, BLOCK, pic_sign, sign04)

	@Set_EventObj(1, 1, NPC, hi, hi_01)
	@Set_EventObj(1, 255, PANEL,pic_slide , switch)

\フィールド部分
	@Set_EventObj(0, 7, PANEL, NULL)
	@Set_EventObj(0, 8, PANEL, NULL)
	@Set_EventObj(0, 9, BLOCK, pic_treasurebox, treasurebox)
	@Set_EventObj(0, 62, BLOCK, pic_treasurebox, treasurebox2)			\NULLは空白画像
	@Set_EventObj(0, 100, BLOCK, pic_treasurebox, dammy_treasurebox)
	@Set_EventObj(0, 10, PANEL, NULL)
	@Set_EventObj(0, 56, BLOCK, NULL)
	@Set_EventObj(0, 64, BLOCK, NULL)
	
	\↓こういうのはExcelのフィル機能を使うと一瞬で生成できて超便利。一個一個手入力は絶対に避けるべき。方法わからなければ聞いてください。
	@Set_EventObj(0, 11, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 12, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 13, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 14, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 15, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 16, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 17, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 18, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 19, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 20, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 21, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 22, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 23, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 24, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 25, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 26, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 27, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 28, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 29, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 30, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 31, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 32, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 33, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 34, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 35, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 36, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 37, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 38, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 39, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 40, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 41, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 42, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 43, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 44, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 45, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 46, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 47, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 48, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 49, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 50, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 51, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 52, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 53, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 54, PUSHBLOCK, pic_tree)
	@Set_EventObj(0, 55, PUSHBLOCK, pic_tree)

\-----------------------------------------------------------------
【SystemCommand Load Completed!】
\↑ロード完了メッセージ（完成版では削除）








































